@inject HttpClient Http
@using MentalMural.Shared

<div class="journalDropdown @(IsShown?"slideInTop":(!FirstLoad?"slideOutTop":"hideTop"))">
    <div class="centerBox">
        <div class="read">
            <p>Placeholder Entry</p>
            <div class="changePage">
                <button>&lt;</button><button>&gt;</button>
            </div>
            <div class="extra">
                <button>X</button>
            </div>
        </div>
        <div class="newEntry">
            <p>New Entry</p>
            <input type="text" />
            <input type="number" />
            <button>Save Entry</button>
        </div>
    </div>
</div>

<style>
    .journalDropdown {
        margin-top: 10px;
        float: right;
        background-color: white;
        position: relative;
        width: 80%;
        height: auto;
        margin-right: 0px;
        border-radius: 10px;
    }

    #clearJournal {
        color: red;
    }

    .slideOutTop {
        animation: toTop @AnimationTime forwards;
    }

    @@keyframes toTop {
        0% {
            opacity: 1;
        }

        100% {
            transform: translateY(-20vh);
            opacity: 0;
        }
    }

    @@keyframes fromTop {
        0% {
            transform: translateY(-10vh);
            opacity: 0;
        }

        50% {
            transform: translateY(0px);
            opacity: 1
        }
    }

    @@keyframes hideTop {
        0% {
            transform: translateY(-20vh);
            opacity: 0;
        }

        100% {
            transform: translateY(-20vh);
            opacity: 0;
        }
    }
</style>

@code {
    [Parameter] public string AnimationTime { get; set; }
    [Parameter] public bool IsShown { get; set; }
    [Parameter] public bool FirstLoad { get; set; }

    private string? inputValue { get; set; }

    private string? ObtainedValue { get; set; }

    private string? entry { get; set; }

    public async Task GetJournal()
    {
        List<JournalEntryData>? entries = await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries");
        entry = entries == null || entries.Count == 0 ? "No entries to display" : entries[0].Entry;
    }

    async void SaveEntry()
    {
        ObtainedValue = inputValue;
        JournalEntryData newEntry = new JournalEntryData();
        newEntry.Entry = ObtainedValue;
        newEntry.Timestamp = DateTime.Now;
        newEntry.Id = (await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries")).Count + 1;
        await Http.PostAsJsonAsync<JournalEntryData>("JournalEntry/AddEntry", newEntry);

    }

    async void ClearJournal()
    {
        int len = (await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries")).Count;


        while (len > 0)
        {
            await Http.DeleteAsync("JournalEntry/DeleteEntry/" + len.ToString());
            len--;
        }

    }
}

