@inject HttpClient Http
@using MentalMural.Shared

<p id="journal">Received Entry: @entry</p>
<button class="journalMenu">Journal</button>
<div class="dropdownContainer">
    <ul class="dropdown-list">
        <li class="dropdownOption" @onclick="GetJournal">View Journal</li>
        <li class="dropdownOption">Add Entry</li>
        <button @onclick="ClearJournal">Clear Journal</button>
    </ul>
    <input type="text" id="entry" @bind="inputValue"/>
    <button @onclick="SaveEntry">Fuck</button>
    <p>Received: @ObtainedValue</p>
</div>

@code {
    private string? inputValue { get; set; }

    private string? ObtainedValue { get; set; }

    private string? entry { get; set; }


    public async Task GetJournal()
    {
        List<JournalEntryData>? entries = await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries");
        entry = entries == null || entries.Count == 0 ? "No entries to display" : entries[0].Entry;
    }

    async void SaveEntry()
    {
        ObtainedValue = inputValue;
        JournalEntryData newEntry = new JournalEntryData();
        newEntry.Entry = ObtainedValue;
        newEntry.Timestamp = DateTime.Now;
        newEntry.Id = (await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries")).Count + 1;
        await Http.PostAsJsonAsync<JournalEntryData>("JournalEntry/AddEntry", newEntry);

    }

    async void ClearJournal()
    {
        int len = (await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries")).Count;


        while (len > 0)
        {
            await Http.DeleteAsync("JournalEntry/DeleteEntry/"+len.ToString());
            len--;
        }

    }

}
