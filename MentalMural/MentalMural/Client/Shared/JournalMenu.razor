@inject HttpClient Http
@using MentalMural.Shared

<div class="slideInJournal @(IsShown?"slideInLeftJournal":(FirstLoad?"":"slideOutLeftJournal"))">
        <div class="half" id="left">
            <div class="centerBox">
                <div class="changePage">
                    <button class="pgBtn" @onclick="PrevEntry">&lt;</button>
                    <button class="openJournal" @onclick="GetJournal">Open Journal</button>
                    <button class="pgBtn" @onclick="NextEntry">&gt;</button>
                </div>
            </div>
            <p>@entry</p>
            <div class="centerBox">
                <div class="extra">
                    <button id="clearJournal" @onclick="ClearJournal">Clear Journal</button>
                </div>
            </div>
        </div>
        <div class="half" id="right">
            <div class="centerBox">
                <h6>New Entry</h6>
            </div>
            <div class="entryBox">
                <textarea class="newEntry" @bind="inputValue" />
            </div>
            <div class="centerBox">
                <label>Mood Rating:</label><input class="moodInput" type="number" min="1" max="10" @bind="moodRating"/>
                <button @onclick="SaveEntry">Save Entry</button>
            </div>
        </div>
</div>

<style>
    .slideInJournal {
        float: left;
        z-index: 2;
        margin-top: 10px;
        margin-left: 1vw;
        background-color: white;
        position: absolute;
        min-width: 425px;
        width: 40vw;
        max-width: 900px;
        min-height: 500px;
        height: 60vh;
        border-width: 8px;
        border-style: solid;
        border-color: saddlebrown;
        border-radius: 10px;
        visibility: hidden;
        display: flex;
    }

    .centerBox {
        width: fit-content;
        margin: auto;
    }

    .half {
        width: 50%;
        height: 100%;
    }

    #left {
        justify-content: center;
        border-right: 1px;
        border-right-width: 1px;
        border-right-style: solid;
        border-right-color: black;
    }

    #left p {
        margin: 10px auto 10px auto;
        height: 75%;
        width: 90%;
        border-width: 1px;
        border-color: black;
        border-style: solid;
    }

    .changePage {
        margin-top: 10px;
    }

    .pgBtn {
        border-radius: 25px;
    }

    .openJournal {
        margin: 0px 5px 0px 5px;
    }

    #clearJournal {
        color: red;
    }

    #right h6{
        margin-top: 15px;
    }

    .entryBox {
        width: 90%;
        margin: auto;
    }

    .newEntry {
        margin: auto;
        max-height: 47vh;
        width: 100%;
    }

    .moodInput {
        width: 60px;
        margin-left: 5px;
    }

    .slideInLeftJournal {
        animation: fromLeftJournal @AnimationTime forwards;
    }

    .slideOutLeftJournal {
        animation: toLeftJournal @AnimationTime forwards;
    }

    @@keyframes toLeftJournal {
        0% {
            visibility: visible;
            opacity: 1;
        }

        100% {
            visibility: hidden;
            transform: translateX(-20vw);
            opacity: 0;
        }
    }

    @@keyframes fromLeftJournal {
        0% {
            visibility: hidden;
            transform: translateX(-10vw);
            opacity: 0;
        }

        100% {
            visibility: visible;
            transform: translateX(0px);
            opacity: 1
        }
    }
</style>

@code {
    [Parameter] public string AnimationTime { get; set; }
    [Parameter] public bool IsShown { get; set; }
    [Parameter] public bool FirstLoad { get; set; }

    private string? inputValue { get; set; }

    private int curIndex = 0;

    private string? entry { get; set; }
    private int? moodRating { get; set; } = 5;

    private List<JournalEntryData>? entries;

    public async Task GetJournal()
    {
        curIndex = 0;
        entries = await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries");
        entry = entries == null || entries.Count == 0 ? "No entries to display." : entries[0].Entry;
    }

    async void SaveEntry()
    {
        JournalEntryData newEntry = new JournalEntryData();
        newEntry.Entry = inputValue;
        newEntry.Timestamp = DateTime.Now;
        newEntry.Id = (await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries")).Count + 1;
        // newEntry.MoodRating = moodRating == null ? 5 : (int)moodRating;
        await Http.PostAsJsonAsync<JournalEntryData>("JournalEntry/AddEntry", newEntry);

    }

    async void ClearJournal()
    {
        int len = (await Http.GetFromJsonAsync<List<JournalEntryData>>("JournalEntry/GetEntries")).Count;


        while (len > 0)
        {
            await Http.DeleteAsync("JournalEntry/DeleteEntry/" + len.ToString());
            len--;
        }

        entry = "No entries to display.";
    }

    void NextEntry()
    {
        if (entries.Count != 0)
        {
            if (curIndex < (entries.Count - 1))
            {
                curIndex++;
                entry = entries[curIndex].Entry;
            }
        } else
        {
            entry = "No entries to display.";
        }
    }

    void PrevEntry()
    {
        if (entries.Count != 0)
        {
            if (curIndex > 0)
            {
                curIndex--;
                entry = entries[curIndex].Entry;
            }
        }
        else
        {
            entry = "No entries to display.";
        }
    }
}

