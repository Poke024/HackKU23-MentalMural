<div class="customizeRow @(IsShown?"slideInLeftCustom":(FirstLoad?"":"slideOutLeftCustom"))">
    <button id="background" class="customizeOption" @onclick="changeBackground">
        <ShowHide Toggle="@dummyToggle" BgNum="@BackgroundNum" FirstLoad="@firstLoad" ImgSrc="background.png" ImgAlt="Change Background"></ShowHide>
    </button>
    <button id="sound" class="customizeOption" @onclick="changeSound"><img class="icon" src="sound.png" alt="Change Sound and Music"></button>
    <button id="time" class="customizeOption" @onclick="changeTime"><img class="icon" src="time.png" alt="Change Time"></button>
    <div class="audioContainer">
        @if (audio == 2) {
            <audio autoplay><source src="/OMORI - Poems In The Fog.mp3" /></audio>
        } else if (audio == 3) {
            <audio autoplay><source src="/Light Rain Ambient - SoundsForYou.mp3" /></audio>
        } else if (audio == 4) {
            <audio autoplay><source src="/Nature - Lesfm.mp3" /></audio>
        } else {

        }
    </div>
</div>

<style>
    .customizeRow {
        z-index: 2;
        height: 60px;
        width: 240px;
        margin-top: 10px;
        padding-left: 5px;
        position: absolute;
        top: 0px;
        visibility: hidden;
        margin-left: 60px;
    }

    .customizeOption {
        z-index: 2;
        height: 50px;
        width: 50px;
        border-radius: 25px;
        position: relative;
    }

    .icon {
        z-index: 2;
        height: 25px;
        width: 25px;
        display: inline;
    }

    .slideInLeftCustom {
        animation: fromLeftCustom @AnimationTime forwards;
    }

    .slideOutLeftCustom {
        animation: toLeftCustom @AnimationTime forwards;
    }

    @@keyframes toLeftCustom {
        0% {
            visibility: visible;
            opacity: 1;
        }

        100% {
            visibility: hidden;
            transform: translateX(-10vw);
            opacity: 0;
        }
    }

    @@keyframes fromLeftCustom {
        0% {
            visibility: hidden;
            transform: translateX(-10vw);
            opacity: 0;
        }

        100% {
            visibility: visible;
            transform: translateX(0px);
            opacity: 1
        }
    }
</style>

@code {
    [Parameter] public string? AnimationTime { get; set; }
    [Parameter] public bool IsShown { get; set; }
    [Parameter] public bool FirstLoad { get; set; }
    public int BackgroundNum = 1;
    public bool day = true;
    public int audio = 1;

    bool dummyToggle = false;
    bool firstLoad = true;

    [Parameter] public EventCallback<int> OnBgCallback { get; set; }
    [Parameter] public EventCallback<bool> OnTimeCallback { get; set; }

    protected async Task changeBackground()
    {
        dummyToggle = !dummyToggle;
        BackgroundNum++;
        if (BackgroundNum > 4)
        {
            BackgroundNum = 1;
        }
        if (firstLoad)
        {
            firstLoad = false;
        }

        await OnBgCallback.InvokeAsync(BackgroundNum);
    }

    private void changeSound()
    {
        if (audio < 4) {
            audio++;
        } else {
            audio = 1;
        }
    }

    private async Task changeTime()
    {
        day = !day;
        await OnTimeCallback.InvokeAsync(day);
    }
}
