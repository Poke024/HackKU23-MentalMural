@inject HttpClient Http
@inject IJSRuntime JS
@using MentalMural.Shared

<div class="loginSlide @(IsShown?"slideInRightLogin":(FirstLoad?"":"slideOutRightLogin"))">
    <div class="centerBox">
        <div class="row">
            <label>Username:</label><input type="text" @bind="usernameInput"/>
        </div>
        <div class="row">
            <label>Password:</label><input type="password" @bind="passwordInput"/>
        </div>
        <div class="row">
            <div class="half">
                <button @onclick="SignUp">Sign Up</button>
            </div>
            <div class="half">
                <button @onclick="LogIn">Log in</button>
            </div>
        </div>
        <div class="row">
        </div>
    </div>
</div>

<style>
    .loginSlide {
        z-index: 2;
        margin-top: 10px;
        position: absolute;
        top: 0px;
        right: 0px;
        visibility: hidden;
        background-color: white;
        width: 300px;
        height: auto;
        border-radius: 10px;
        visibility: hidden;
    }
    
    .centerBox {
        margin: auto;
    }

    .row {
        padding: 10px;
        align-items: center;
        justify-content: center;
    }


    .row label {
        width: 30%;
    }

    .row input {
        width: 60%;
        margin-right: 15px;
    }

    .row .half {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40%;
    }

    .half button {
    }

    .slideInRightLogin {
        animation: fromRightLogin @AnimationTime forwards;
    }

    .slideOutRightLogin {
        animation: toRightLogin @AnimationTime forwards;
    }

    @@keyframes toRightLogin {
        0% {
            transform: translateX(-65px);
            visibility: visible;
            opacity: 1;
        }

        100% {
            visibility: hidden;
            transform: translateX(5vw);
            opacity: 0;
        }
    }

    @@keyframes fromRightLogin {
        0% {
            visibility: hidden;
            transform: translateX(5vw);
            opacity: 0;
        }

        100% {
            visibility: visible;
            transform: translateX(-65px);
            opacity: 1
        }
    }
</style>

@code {
    [Parameter] public string AnimationTime { get; set; }
    [Parameter] public bool IsShown { get; set; }
    [Parameter] public bool FirstLoad { get; set; }

    private string? usernameInput;
    private string? passwordInput;
    public UserData? userData; 


    private async void SignUp()
    {
        var exists = (await Http.GetFromJsonAsync<List<UserData>>("JournalEntry/GetUserData")).FirstOrDefault(p => p.Username == usernameInput);
        if (exists != null)
        {
            await JS.InvokeAsync<object>("alert", "The username already exists");
        } else if (usernameInput == null || passwordInput == null)
        {
            await JS.InvokeAsync<object>("alert", "Must have a username and password");
        }
        {
            // no account with this username, both values not null
            int num_users = (await Http.GetFromJsonAsync<List<UserData>>("JournalEntry/GetUserData")).Count;
            await Http.PostAsJsonAsync<UserData>("JournalEntry/AddUser", new UserData { Id = num_users + 1, Username = usernameInput, Password = passwordInput, Settings = ""});
        }

    }

    private async void LogIn()
    {
        var existingAccount = (await Http.GetFromJsonAsync<List<UserData>>("JournalEntry/GetUserData")).FirstOrDefault(p => p.Username == usernameInput);
        if (existingAccount == null)
        {
            // no account with this username exists
            await JS.InvokeAsync<object>("alert", "No account with this username exists");
        } else if (existingAccount.Password != passwordInput)
        {
            await JS.InvokeAsync<object>("alert", "Incorrect Password");
            //account exists but password is wrong
        } else
        {
            // everything is good, retirieve the users info
            userData = existingAccount;
        }
    }
}
